const INTEGRITY_CHECKSUM="53e7749997702c747f2e74089088f3f9",bypassHeaderName="x-swap-bypass",activeClientIds=new Set;let isOnline=!1;const isBypass=function(e){return[/^(http|https):\/\/([\w\W]+)\/sockjs-node\/info/gi,/^(http|https):\/\/([\w\W]+)\/([\w\W]+).hot-update/gi].some((function(t){if(e.match(t))return!0}))};async function resolveMasterClient(e){const t=await self.clients.get(e.clientId);if("top-level"===t.frameType)return t;return(await self.clients.matchAll()).filter((e=>"visible"===e.visibilityState)).find((e=>activeClientIds.has(e.id)))}async function handleRequest(e,t){const s=await resolveMasterClient(e),n=await getResponse(e,s,t);return s&&activeClientIds.has(s.id)&&async function(){const e=n.clone();sendToClient(s,{type:"RESPONSE",payload:{requestId:t,type:e.type,ok:e.ok,status:e.status,statusText:e.statusText,body:null===e.body?null:await e.text(),headers:serializeHeaders(e.headers),redirected:e.redirected}})}(),n}async function getResponse(e,t,s){const{request:n}=e,r=n.clone(),a=()=>fetch(r);if(!t)return a();if(!activeClientIds.has(t.id))return await a();if("true"===r.headers.get("x-swap-bypass")){const e=serializeHeaders(r.headers);delete e["x-swap-bypass"];const t=new Request(r,{headers:new Headers(e)});return fetch(t)}const i=serializeHeaders(n.headers),o=await n.text(),c=await sendToClient(t,{type:"REQUEST",payload:{id:s,url:n.url,method:n.method,headers:i,cache:n.cache,mode:n.mode,credentials:n.credentials,destination:n.destination,integrity:n.integrity,redirect:n.redirect,referrer:n.referrer,referrerPolicy:n.referrerPolicy,body:o,bodyUsed:n.bodyUsed,keepalive:n.keepalive}});switch(c.type){case"MOCK_SUCCESS":return delayPromise((()=>respondWithMock(c)),c.payload.delay);case"MOCK_BY_PASS":return a();case"MOCK_NOT_FOUND":if(isOnline){const{baseURL:e}=c.payload;return(({baseURL:e})=>{const{url:t,referrer:s,headers:n}=r;if(isBypass(t))return a();const i=new URL(`${e}/${t.replace(s,"")}`),o=serializeHeaders(n);["x-swap-jsbridge"].forEach((e=>{delete o[e]}));const c=new Request(i.toString(),new Request(r.clone(),{headers:new Headers(o)}));return fetch(c)})({baseURL:e})}return a();case"NETWORK_ERROR":{const{name:e,message:t}=c.payload,s=new Error(t);throw s.name=e,s}case"INTERNAL_ERROR":{const e=JSON.parse(c.payload.body);return console.error(`[SWAP] Request handler function for "%s %s" has thrown the following exception:\n\n${e.errorType}: ${e.message}\n(see more detailed error stack trace in the mocked response body)\n\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error.`,n.method,n.url),respondWithMock(c)}}return a()}function serializeHeaders(e){const t={};return e.forEach(((e,s)=>{t[s]=t[s]?[].concat(t[s]).concat(e):e})),t}function sendToClient(e,t){return new Promise(((s,n)=>{const r=new MessageChannel;r.port1.onmessage=e=>{if(e.data&&e.data.error)return n(e.data.error);s(e.data)},e.postMessage(JSON.stringify(t),[r.port2])}))}function delayPromise(e,t){return new Promise((s=>{setTimeout((()=>s(e())),t)}))}function respondWithMock(e){return new Response(e.payload.body,{...e.payload,headers:e.payload.headers})}function uuidv4(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}self.addEventListener("install",(function(){return self.skipWaiting()})),self.addEventListener("activate",(async function(e){return self.clients.claim()})),self.addEventListener("message",(async function(e){const t=e.source.id;if(!t||!self.clients)return;const s=await self.clients.get(t);if(!s)return;const n=await self.clients.matchAll();switch(e.data){case"KEEPALIVE_REQUEST":sendToClient(s,{type:"KEEPALIVE_RESPONSE"});break;case"INTEGRITY_CHECK_REQUEST":sendToClient(s,{type:"INTEGRITY_CHECK_RESPONSE",payload:INTEGRITY_CHECKSUM});break;case"MOCK_ACTIVATE":activeClientIds.add(t),sendToClient(s,{type:"MOCKING_ENABLED",payload:!0});break;case"ONLINE":isOnline=!0;break;case"OFFLINE":isOnline=!1;break;case"MOCK_DEACTIVATE":activeClientIds.delete(t);break;case"CLIENT_CLOSED":{activeClientIds.delete(t);const e=n.filter((e=>e.id!==t));0===e.length&&self.registration.unregister();break}}})),self.addEventListener("fetch",(function(e){const{request:t}=e;if("navigate"===t.mode)return;if("image"===t.destination)return;if("only-if-cached"===t.cache&&"same-origin"!==t.mode)return;if(0===activeClientIds.size)return;const s=uuidv4();return e.respondWith(handleRequest(e,s).catch((e=>{console.error('[SWAP] Failed to mock a "%s" request to "%s": %s',t.method,t.url,e)})))}));
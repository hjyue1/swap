import{g as s,p as e,s as t}from"./jsbridge-deps.js";export{a as swapCall,b as swapCallWithPromise}from"./jsbridge-deps.js";import{rest as o,setupWorker as r}from"rocket-swap-sw";import{setupServer as n}from"rocket-swap-sw/node";export{waitFor}from"./waitFor.js";import"rocket-swap-jsbridge";import"axios";const i=function(s){const e=[];return Object.entries(s).forEach((([s,t])=>{const{method:r,url:n}=c(s);o[r]?"function"==typeof t?e.push(o[r](n,t)):e.push(o[r](n,((s,e,o)=>e(o.status(200),o.json(t))))):console.error(`${s}无效字段`)})),e},c=function(s){const[e,t]=s.split(" ");return{method:e.toLowerCase(),url:t}},p=function(){r().stop()},f=t=>{if(e(Object.assign({isMock:!0},t)),s("isMock"))return function(){if("JEST"===s("mode"))return;const e=i(s("mockData")),t=r(...e),{workerOpt:o,bypassMode:n,isOnline:a,baseURL:c}=s();t.start(Object.assign({bypassMode:n,isOnline:a,baseURL:c},o))}();p()},l=p,u=function({isMock:o=!0,mockData:r}){process.env.isJest="true",e({mockData:r,isMock:o,mode:"JEST"});const a=i(s("mockData")),c=n(...a);return t("swapJestServer",c),c},m=function(){const e=s("swapJestServer");e.listen&&e.resetHandlers&&e.close&&(beforeAll((()=>e.listen())),afterEach((()=>e.resetHandlers())),afterAll((()=>e.close())))},d=function(){return s("swapJestServer")},w=function(){r().restoreHandlers()},j=function(){r().resetHandlers()};export{d as getSwapJestServer,f as swapInit,u as swapJestInit,m as swapJestListen,j as swapResetHandlers,w as swapRestoreHandlers,l as swapStop};
